11). Round Robin Algorithm.
#include <stdio.h>

int main() {
    int ts, bt1[10], wt[10], tat[10], i, j = 0, n, bt[10], ttat = 0, twt = 0, tot = 0;
    float awt, atat;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter the timeslice: ");
    scanf("%d", &ts);

    printf("Enter the burst time for each process:\n");
    for (i = 0; i < n; i++) {
        printf("P%d: ", i + 1);
        scanf("%d", &bt1[i]);
        bt[i] = bt1[i];
    }

    while (j < n) {
        for (i = 0; i < n; i++) {
            if (bt[i] > 0) {
                if (bt[i] >= ts) {
                    tot += ts;
                    bt[i] -= ts;
                    if (bt[i] == 0) {
                        j++;
                        tat[i] = tot;
                    }
                } else {
                    tot += bt[i];
                    bt[i] = 0;
                    j++;
                    tat[i] = tot;
                }
            }
        }
    }

    for (i = 0; i < n; i++) {
        wt[i] = tat[i] - bt1[i];
        twt += wt[i];
        ttat += tat[i];
    }

    awt = (float)twt / n;
    atat = (float)ttat / n;

    printf("\nPID\tBT\tWT\tTAT\n");
    for (i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\n", i + 1, bt1[i], wt[i], tat[i]);
    }

    printf("\nAverage Waiting Time = %.2f", awt);
    printf("\nAverage Turnaround Time = %.2f\n", atat);

    return 0;
11 b). Shortest job first algorithm.
#include <stdio.h>
int main() {
    int pid[10], bt[10], wt[10], tat[10];
    int n, twt = 0, ttat = 0, i, j, t;
    float awt, atat;

    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter burst times for each process:\n");
    for (i = 0; i < n; i++) {
        printf("Burst time for process %d: ", i + 1);
        scanf("%d", &bt[i]);
    }
    printf("Enter process IDs:\n");
    for (i = 0; i < n; i++) {
        printf("PID for process %d: ", i + 1);
        scanf("%d", &pid[i]);
    }
    // Sort processes by burst time using bubble sort
    for (i = 0; i < n; i++) {
        for (j = i + 1; j < n; j++) {
            if (bt[i] > bt[j]) {
                // Swap burst times
                t = bt[i];
                bt[i] = bt[j];
                bt[j] = t;
 // Swap corresponding PIDs
                t = pid[i];
                pid[i] = pid[j];
                pid[j] = t;
            }
        }
    }

    // Compute waiting and turnaround times
    wt[0] = 0;
    tat[0] = bt[0];

    for (i = 1; i < n; i++) {
        wt[i] = tat[i - 1];
        tat[i] = wt[i] + bt[i];
    }

    // Totals for averages
    for (i = 0; i < n; i++) {
        twt += wt[i];
        ttat += tat[i];
    }

    awt = (float)twt / n;
    atat = (float)ttat / n;

    // Display results
    printf("\nPID\tBT\tWT\tTAT\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\n", pid[i], bt[i], wt[i], tat[i]);
    }

    printf("\nAverage Waiting Time: %.2f", awt);
    printf("\nAverage Turnaround Time: %.2f\n", atat);

    return 0;
}
}
